1. Create model from the reasoned 

>> ng g i models/room

- Check the Enum 
- check the sub model 
- check the if our system have map : 
- create the submodule first 
- អាណាជា Primative type we no need to worry 
- Create only the subtype inside the room 

Ex: Location is the subtype in the room 

"location": {
                "country": null,
                "city": "Phnom Penh",
                "district": "Chamkarmon",
                "street": null,
                "fullAddress": null
            },

==> So we create location to another interface 

2. Create submodel 

>> ng g i models/room-location

Interface code:

-----------------------------------------

export interface RoomLocation {
    country ?: string;
    city ?: string;
    district ?: string;
    street  ?: string;
    fullAddress  ?: string;
}


/*
"location": {
                "country": null,
                "city": "Phnom Penh",
                "district": "Chamkarmon",
                "street": null,
                "fullAddress": null
            },
*/

----------------------------------

3. Create sub emum :  

From the model responde we can not find the all the Enum. so we can ask the BE of the Enum that they create 

- យើងបង្កើត តែ interface មួយហើយដាក់ enum ចូលទាំងអស់បាន 


>> ng g i models/enum

-----------------------------------------

export enum GenderPreference {
      MALE = 'MALE', 
      FEMALE = 'FEMALE', 
      NO_PREFERENCE = 'NO_PREFERENCE'

    //   MALE, FEMALE, NO_PREFERENCE
}

export enum PropertyType {
    APARTMENT = 'APARTMENT', 
    VILLA = 'CONDO', 
    CONDO = 'CONDO',
    HOUSE = 'HOUSE',
    SHARED_HOUSE = 'HOUSE'
    //    APARTMENT, VILLA, CONDO, HOUSE, SHARED_HOUSE
}

export enum RoomType {
    SINGLE = 'SINGLE', 
    DOUBLE = 'DOUBLE', 
    SUITE = 'SUITE',
    STUDIO = 'STUDIO',

    //   SINGLE, DOUBLE, SUITE, STUDIO
}


-----------------------------------------

Note: 

SINGLE = 'SINGLE', this is what we create in the typescrip for the type : It mean single type is string by default it will assign as number ;

4. create content[] = rooms 

import { GenderPreference, PropertyType, RoomType } from "./enum";
import { RoomLocation } from "./room-location";

export interface Room {
    id ?: string;
    name ?: string;
    price ?: number;
    floor ?: number;
    roomSize ?: number;
    location ?: RoomLocation;
    hasFan ?:boolean;
    hasAirConditioner ?:boolean;
    hasParking ?:boolean;
     hasPrivateBathroom?: boolean;
    hasBalcony?: boolean;
    hasKitchen?: boolean;
    hasFridge?: boolean;
    hasWashingMachine?: boolean;
    hasTV?: boolean;
    hasWiFi?: boolean;
    hasElevator?: boolean;
    maxOccupants?: number;
    isPetFriendly?: boolean;
    isSmokingAllowed?: boolean;
    isSharedRoom?: boolean;
    genderPreference?: GenderPreference;

    roomType?: RoomType;
    propertyType?: PropertyType;

    distanceToCenter?: number;
    nearbyLandmarks?: string[];

    isUtilityIncluded?: boolean;
    depositRequired?: boolean;
    minStayMonths?: number;

    hasPhotos?: boolean;
    photoCount?: number;
    hasVideoTour?: boolean;

    verifiedListing?: boolean;

    availableFrom?: string;   // ISO string
    availableTo?: string;     // ISO string

    createdAt?: string;
    lastUpdated?: string;

    extraAttributes?: Record<string, any>; 


}

-------------- From return API content

/*

"content": [
        {
            "id": "68a28bcf3db7c1f20d03afea",
            "name": "Cozy Studio Apartment",
            "price": 350.0,
            "floor": 3,
            "roomSize": 28.5,
            "location": {
                "country": null,
                "city": "Phnom Penh",
                "district": "Chamkarmon",
                "street": null,
                "fullAddress": null
            },
            "hasFan": true,
            "hasAirConditioner": true,
            "hasParking": false,
            "hasPrivateBathroom": true,
            "hasBalcony": true,
            "hasKitchen": true,
            "hasFridge": true,
            "hasWashingMachine": false,
            "hasTV": false,
            "hasWiFi": true,
            "hasElevator": true,
            "maxOccupants": 2,
            "isPetFriendly": false,
            "isSmokingAllowed": false,
            "isSharedRoom": false,
            "genderPreference": "NO_PREFERENCE",
            "roomType": "STUDIO",
            "propertyType": "APARTMENT",
            "distanceToCenter": 2.3,
            "nearbyLandmarks": [
                "university",
                "mall",
                "hospital"
            ],
            "isUtilityIncluded": true,
            "depositRequired": true,
            "minStayMonths": 3,
            "hasPhotos": true,
            "photoCount": 5,
            "hasVideoTour": false,
            "verifiedListing": true,
            "availableFrom": "2025-09-01T00:00:00",
            "availableTo": "2026-09-01T00:00:00",
            "createdAt": "2025-08-18T09:00:00",
            "lastUpdated": "2025-08-18T09:05:00",
            "extraAttributes": {
                "furnished": true,
                "internetSpeedMbps": 50,
                "security": "24/7"
            }
        }

        */


--------------------------------------------

5. Create page : this is the big model 

>> ng g i models/page

/*
{
    "page": 0,
    "size": 1,
    "totalElements": 100002,
    "totalPage": 100002,
    "content": []
}
*/


----------------------

export interface Page<T> {
    page ?: number;
    size ?: number;
    totalElements ?: number;
    totalPage ?: number;
    content: T[];
}


===================================

Note in the map from the Java model ==> to the Typescrip it called : record 

In Java: 

"extraAttributes": {
                "furnished": true,
                "internetSpeedMbps": 50,
                "security": "24/7"
            }

==> in TS : we cerate type for the record : 

extraAttributes?: Record<string, any>; 



























































